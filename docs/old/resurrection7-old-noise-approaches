; we haven't done harmonic noise yet!
; noise section 1. Attack limited to note attack, decline can be 
; pitched chiff env after Dobson. drivation of durations?
; atk, dcy and sus phases (latter for thru-note)
; therefore attack peak amp, dcy level, final decline(sus) pattern? level?
; these are note dependent and also require setting dfrom the score
; but in some intuuitive fashion; predefined instr settings?
;1) noise atk can't be greater than note attack - physically impossible
; 2) noise max amp might be gretaer  than note amp  but unlikely
; purer tone when loud or low pitch, so noise amp must be less for
; smaller isw. Allow user scaling? eg for flute/sax differences
; but preserve linkage so less effect at smaller isw
; noise dur is a function of user control, just provide defaults
; these values are set for all noise types, mix to obtain balance

;ginmascl = 0.02439
;ginmaoff = -0.016805	; breakpoints isw 0.689, 0.73
;giunmaxampscl = 0.1
;inmaxamp	tablei	isw*ginmascl+ginmaoff, $linfactor, 1
;inmaxamp = (inmaxamp-0.001)*giunmaxampscl
;print inmaxamp
; does the noise decay ampl depend on the note too? more vars, fixed level?
;indcyamp = inmaxamp*0.1
; perhaps just call ncode direct?
;knaenv	linseg	0, iaeattack, inotevol*inmaxamp, iaeattack, \
;			inotevol*indcyamp, iaeattack, 0

; new section
; problem: tied notes may have through-noise but no atk noise
;	anoise = 0

; noise amp env for some type of noise... which one? how many?
; at most say 1 pitched noise and 2 fixed noises plus 1 through-note
; noise? but then what of band-limited noise, e.g. at harmonic and partials
;	$naenv(iaeattack#iaeattack#201#211#)
	; make some noise(type)
;klambda	line	0, idur, 1	; for Poisson noise
;klambda = inotevol
	kbeta = 0.8; needed for noise tye 1, orig. flanged noise
;$noise(1#0.1#)	; arg 1 = noise type
;knf0 = inotefrq	; frq in Hz for buzz noise
;	$noise(5#1#)	; arg 1 = noise type, 2 = relative level

;	irat1 = 1
;	irat2 = 0.1
;	imaxdlyms = 5	;  ms max delay
;	krate 	line 	irat1, idur, irat2
;	klfo 	oscil 	imaxdlyms, krate/idur, 245
;$flangenoise
;$pchnoise(inotefrq*2#20#)
;anoise0 = anoise0+anoise
;	$naenv(iaeattack#idur-iaeattack#201#211#)	; thru-note noise
;	$noise(3#1#)	; arg 1 = noise type
;anoise0 = anoise0+anoise
; won't work if we need pitched noise on some noise sources but not others...
; put the noise gen in the section so we generate the noise _and_ pitch it?
; then we're back to the original macro...almost
;	if gipchnoise==0 goto nopchnoise
;	$pchnoise(inotefrq*2#20#)	; args cf, bw for reson filter
;inatk	table	$nix, 260
;print inatk
;inatk = (inatk>1 ? 1 : inatk)	; scalar

;indclflag	table	$nix+1, 260
;print indclflag
;indcl	table	$nix+2, 260
;inatkt = inatk*iaeattack
;indclt = (indclflag==0 ? indcl*iaeattack : indcl*(idur-iaeattack))
;indclt = (indclt>idur-iaeattack ? idur-iaeattack : indclt)
;indur = inatkt+indclt
;print indur
;inatkfn	table	$nix+3, 260
;indclfn	table	$nix+4, 260
;print inatkfn, indclfn

; can't do loop or k-rate oscil1i in macro
; noise 1
;intype	table	$nix+5, 260
;print intype
;invol	table	$nix+6, 260
;print invol

;	nopchnoise:
	; note: this flanges anoise, wherever it came from
;	if giflangenoise==0 kgoto nonoiseflange
	; params for noise flanging
;	irat1 = 1
;	irat2 = 0.1
;	imaxdlyms = 5	;  ms max delay
;printks "khn %.0f cf %.3f bw %.3f cfoff %.3f\\n", 0.2, khn, kncf, knbw, gkcfoff
;knbw = kpramp
;	krate 	line 	irat1, idur, irat2
;	klfo 	oscil 	imaxdlyms, krate/idur, 245
;	$flangenoise

;	nonoiseflange:

; new new noise stuff
; 1 op per pass or chain?
; if 1 op we need to generate noise and repeatedly re-process
;gisomenoisecode = 32
; noise env params
;inatk = iaeattack
;indcl = iaeattack
;inatkfn = 201
;indclfn = 211
; noise gen params
;intype = 1
;invol = 1
; pitched noise params
;inpchfrq = ;inotefrq*2
;inpchbw;init = 20
;inpchbwterm = 20
;inpchbwfn = $unity
;inpchskip = 0	; pitched
; noise flanger params
;irat1 = 0.1
;irat2 = 1
;imaxdlyms = 5
;iflangefn = 245
; band-limited params
;;ginbwfn = 211
;bwinit = 0
;ibwterm = 1
;ibwfn = 211
;indur = inatk+indcl	; might be different: flag
	; first make some noise
;	$naenv(inatk#indcl#inatkfn#indclfn#)
;	$noise(intype#invol#)	; arg 1 = noise type

	; now process the noise
;	inparams = gisomenoisecode	; g so we can set it slesewhere

	; proc 1: pitched/fixed noise	; fixed has const cf and bw with rescaling
;	if inparams&256 == 0 goto proc2
;	$pchnoise(inpchfrq#inpchbwinit#inpchbwterm#inskip#)	; skip = 0 pitched, 1 fixed
;	goto procdone	; done first process on 1st pass (do 1 of 3)

;	proc2:
	;proc 2: flanged noise
;	inparams = (inparams>=256 ? inparams-256 : inparams)
;	if inparams&128 == 0 goto proc3
;	$flangenoise(irat1#irat2#imaxdlyms#iflangefn#inatk+indcl#)
;	goto procdone

;	proc3:
;	; proc 3: fixed noise (? 1 or 2?)
;	inparams = (inparams>=128 ? inparams-128: inparams)
;	if inparams&64 == 0 goto proc4
; empty procedure
;	goto procdone

;	proc3:
	; proc 3: band-limited noise (harmonics, partials)
;	inparams = (inparams>=64 ? inparams-64: inparams)
;	if inparams&32 == 0 goto procdone
;	khn = 1
;	ablnoise = 0
;	inratio = (gihasnoise==1 ? 0.5 : 1/3)   ; 1 or 2 potential partial noise bands
;	gknroff = inratio
	; make the osc run through the whole table in at most the defined period
;knblbwmod	oscili	1, 1/(indur+$mindur), 212
;; we don't stop at the terminal amplitude - if the fn is increasing we need 
; a terminal vakue of 1!
; can we use table[end value] ?
;iterm	table	1, 212, 1
;print iterm
; the bwmod is applied to each harmonic in turn
;knblbwmod2	linseg	1, indur, 1, 0, 0
;knblbwmod3	linseg	0, indur, 0, 0, iterm, idur-indur, iterm
;knblbwmod = knblbwmod*knblbwmod2
;knblbwmod = knblbwmod+knblbwmod3
; this is UGLY but it WORKS
;display knblbwmod, idur
; need to supply bw scalar
;$allncode
;	anoise0 = anoise0+ablnoise	; note - returns ablnoise!
; this needs reallocating to anoise to be any further use!
;	if gihasnoise==1 kgoto blnoisedone;	 note -noise flag reflects partials!

;	nb2:
;	khn = 1
;	ablnoise = 0
;	gknroff = 2*inratio
;	$allncode
;	anoise0 = anoise0+ablnoise

;	blnoisedone:
;	anoise = anoise0

;	procdone:


; new new new noise stuff
;anout = 0
;indefsix = 0
;inoises	table	indefsix, 260, 0	; table containing noise setup
; if there are noises we read params for each group of 4 processes
; we have noise(s), what type?
;print inoises

; loop section
;ninit:
; read noise params
;inatk	table	indefsix, 260
;print inatk
;inatk = (inatk>1 ? 1 : inatk)	; scalar

;indclflag	table	indefsix, 260
;print indclflag
;indcl	table	indefsix, 260
;inatkt = inatk*iaeattack
;indclt = (indclflag==0 ? indcl*iaeattack : indcl*(idur-iaeattack))
;indclt = (indclt>idur-iaeattack ? idur-iaeattack : indclt)
;indur = inatkt+indclt
;print indur
;inatkfn	table	indefsix, 260
;indclfn	table	indefsix, 260
;print inatkfn, indclfn

; can't do loop or k-rate oscil1i in macro
; noise 1
;intype	table	indefsix, 260
;print intype
;invol	table	indefsix, 260
;print invol


; first make some noise
;$naenv(inatkt#indclt#inatkfn#indclfn#)
;$noise(intype#invol#)	; arg 1 = noise type

; what to do with the noise once we've got it
; process loop
;inprocs	table	indefsix, 260	; number of processes to apply
; if this isn't a loop, is this redundant?
;print inprocs

;nprocinit:
; if we can't use a loop we have to repeat tests for all noises
;nprocs1:
;inproc1	table	indefsix, 260	; particular process...
; this only holds 1 process number - the last...
;print inproc
; can we call a macro with a table index? or its indexed value?
;if inproc>1 igoto proc2
; these need to be noise-numbered varaibles, e.g. belonging to noise1, noise2
;inpchcf	table	indefsix, 260
;inpchcf = inpchcf*inotefrq
;inpchbwinit	table	indefsix, 260
;inpchbwterm	table	indefsix, 260
;inpchbwfn	table	indefsix, 260
;inpchskip	table	indefsix, 260
;print inpchbwfn, inpchskip
;$pchnoise(inpchcf#inpchbwinit#inpchbwterm#inpchbwfn#inpchskip#)	; skip = 0 pitched, 1 fixed
;indefsix = indefsix+?
;igoto nterm

;proc2:
;if inproc>2 igoto proc3
;igoto nterm

;proc3:

;nterm:
;anout = anout+anoise	; collect the noise components

;inprocs = inprocs-1
;if inprocs>0 igoto nprocinit

; noise 2 - repeat the palaver

;inoises = inoises-1
;if inoises>0 igoto ninit

;#################################### new^4 stuff
;anout = 0
;indefsix = 0
;inoises	table	indefsix, 260, 0	; table containing noise setup
;print inoises
; just junk now
;indefsix = 1
; read noise params
;inatk	table	indefsix, 260
;print inatk
;inatk = (inatk>1 ? 1 : inatk)	; scalar

;indclflag	table	indefsix+1, 260
;print indclflag
;indcl	table	indefsix+2, 260
;inatkt = inatk*iaeattack
;indclt = (indclflag==0 ? indcl*iaeattack : indcl*(idur-iaeattack))
;indclt = (indclt>idur-iaeattack ? idur-iaeattack : indclt)
;indur = inatkt+indclt
;print indur
;inatkfn	table	indefsix+3, 260
;indclfn	table	indefsix+4, 260
;print inatkfn, indclfn

; can't do loop or k-rate oscil1i in macro
; noise 1
;intype	table	indefsix+5, 260
;print intype
;invol	table	indefsix+6, 260
;print invol

; because this allocates i-time vars thery'rre overwritten _before_ use
; we have to have numbered vars, bugger
; we can't call noise env with params here
;$naenv(inatkt#indclt#inatkfn#indclfn#)
;$noise(intype#invol#)	; arg 1 = noise type
;anout = anout+anoise

;indefsix = indefsix+8
; read noise params
;inatk	table	indefsix, 260
;print inatk
;inatk = (inatk>1 ? 1 : inatk)	; scalar

;indclflag	table	indefsix+1, 260
;print indclflag
;indcl	table	indefsix+2, 260
;inatkt = inatk*iaeattack
;indclt = (indclflag==0 ? indcl*iaeattack : indcl*(idur-iaeattack))
;indclt = (indclt>idur-iaeattack ? idur-iaeattack : indclt)
;indur = inatkt+indclt
;print indur
;inatkfn	table	indefsix+3, 260
;indclfn	table	indefsix+4, 260
;print inatkfn, indclfn

; can't do loop or k-rate oscil1i in macro
; noise 2
;intype	table	indefsix+5, 260
;print intype
;invol	table	indefsix+6, 260
;print invol

;$naenv(inatkt#indclt#inatkfn#indclfn#)
;$noise(intype#invol#)	; arg 1 = noise type

; ############# new^5 noise stuff
